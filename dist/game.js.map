{"version":3,"file":"game.js","mappings":"mBAAe,MAAMA,UAAsBC,OAAOC,MAc9CC,cACIC,MAAM,QAbF,KAAAC,OAA8C,KAC9C,KAAAC,YAAc,EAGd,KAAAC,QAAkB,EAClB,KAAAC,UAAoB,EAGpB,KAAAC,MAA2D,CAC/DC,MAAO,GAQXC,UAEIC,KAAKC,KAAKC,MAAM,aAAc,8EAE9BF,KAAKC,KAAKC,MAAM,QAAS,iEACzBF,KAAKC,KAAKC,MAAM,WAAY,mEAI5BF,KAAKC,KAAKE,YAAY,SAAU,kDAAmD,CAAEC,WAAY,GAAIC,YAAa,GAAIC,SAAU,KAGpIC,c,MACe,QAAX,EAAAP,KAAKP,cAAM,SAAEe,UACb,MAAMC,EAAYT,KAAKU,QAAQC,IAAIC,OAAO,GAAI,IAAK,UACnDZ,KAAKP,OAASgB,EACdT,KAAKa,cAAcb,KAAKP,QAG5BqB,a,MACc,QAAV,EAAAd,KAAKe,aAAK,SAAEP,UACZR,KAAKe,MAAQf,KAAKU,QAAQC,IAAIC,OAAO,IAAK,IAAK,SAGnDI,gB,MACiB,QAAb,EAAAhB,KAAKiB,gBAAQ,SAAET,UACfR,KAAKiB,SAAWjB,KAAKU,QAAQC,IAAIC,OAAO,IAAK,IAAK,YAClDZ,KAAKiB,SAASC,SAAS,IAG3BC,a,MACInB,KAAKH,MAAMC,MAAQ,EACJ,QAAf,EAAAE,KAAKH,MAAMuB,YAAI,SAAEC,QAAQ,KAG7BC,iBACItB,KAAKU,QAAQC,IAAIY,SAASvB,KAAKP,OAAwCO,KAAKe,OAAO,CAACtB,EAAQsB,KACxFtB,EAAOe,UACPR,KAAKJ,UAAW,KAGpBI,KAAKU,QAAQC,IAAIY,SAASvB,KAAKP,OAAwCO,KAAKiB,UAAU,CAACxB,EAAQwB,K,QAC3FA,EAAST,UACTR,KAAKH,MAAMC,OAAS,IACL,QAAf,EAAAE,KAAKH,MAAMuB,YAAI,SAAEC,QAAQG,OAAOxB,KAAKH,MAAMC,QAC3C2B,QAAQC,IAAmB,QAAf,EAAA1B,KAAKH,MAAMuB,YAAI,eAAEA,SAIrCO,YACI3B,KAAKO,cACLP,KAAKgB,gBACLhB,KAAKc,aACLd,KAAKsB,iBAITM,SAEI,MAAMC,EAAK7B,KAAKW,IAAIC,OAAO,EAAG,EAAG,cACjCZ,KAAKW,IAAIS,KAAK,EAAG,EAAG,UAAW,CAAEU,WAAY,mDAC7C9B,KAAKH,MAAMuB,KAAOpB,KAAKW,IAAIS,KAAK,GAAI,EAAG,IAAK,CAAEU,WAAY,mDAC1DL,QAAQC,IAAI1B,KAAKH,MAAMuB,KAAKA,MAE5BS,EAAGE,UAAU,EAAG,GAChB/B,KAAK2B,YACL3B,KAAKgC,QAAUhC,KAAKiC,MAAMC,SAASC,mBACnCnC,KAAKiC,MAAMC,SAASE,GAAG,WAAYC,IACjB,WAAVA,EAAEC,MACFtC,KAAKL,QAAUK,KAAKL,QAExB8B,QAAQC,IAAIW,EAAEC,KACA,UAAVD,EAAEC,KACFtC,KAAK2B,eAIb3B,KAAKa,gBAITA,cAAc0B,GACV,MAAM3B,EAAS2B,QAAAA,EAAmBvC,KAAKW,IAAIC,OAAO,GAAI,IAAK,UAE3Da,QAAQC,IAAI,iBAAkBd,EAAO4B,OAErC5B,EAAO4B,MAAMZ,OAAO,CAChBU,IAAK,OACLG,QAAS,EACTC,OAAQ,SACRC,SAAU,MAEdlB,QAAQC,IAAId,EAAO4B,MAAMI,OAAO,SAEhChC,EAAO4B,MAAMK,KAAK,QAGtBC,SACQ9C,KAAKL,SAGLK,KAAKJ,UACWmD,QAAQ,wCAEpB/C,KAAKJ,UAAW,EAChBI,KAAK2B,aAGb3B,KAAKgD,UAAUhD,KAAKe,MAAO,GAC3Bf,KAAKiD,cAGTD,UAAUjC,EAAOmC,GACTnC,EAAMoC,WACFpC,EAAMqC,EAAI,IACVrC,EAAMqC,GAAKF,GAEXnC,EAAMsC,WAAY,EAClBtC,EAAMoC,YAAa,GAGnBpC,EAAMqC,EAAI,IACVrC,EAAMqC,GAAKF,GAEXnC,EAAMsC,WAAY,EAClBtC,EAAMoC,YAAa,GAK/BF,a,SACmB,QAAX,EAAAjD,KAAKP,cAAM,eAAE2D,KAAgB,QAAX,EAAApD,KAAKP,cAAM,eAAE6D,KAC3BtD,KAAKgC,QAAQuB,KAAKC,SAClBxD,KAAKP,OAAO2D,GAAKpD,KAAKN,aAEtBM,KAAKgC,QAAQyB,MAAMD,SACnBxD,KAAKP,OAAO2D,GAAKpD,KAAKN,aAEtBM,KAAKgC,QAAQ0B,GAAGF,SAChBxD,KAAKP,OAAO6D,GAAKtD,KAAKN,aAEtBM,KAAKgC,QAAQ2B,KAAKH,SAClBxD,KAAKP,OAAO6D,GAAKtD,KAAKN,eAOtC,MAAMkE,EAAS,CACXC,KAAMxE,OAAOyE,KACbC,MAAO,IACPC,OAAQ,IACRC,MAAO7E,EACPsB,QAAS,CACLwD,QAAS,SACTC,OAAQ,CACJC,OAAO,KAKbC,EAAO,IAAIhF,OAAOiF,KAAKV,GAE7BnC,QAAQC,IAAI2C,I","sources":["webpack://phaser_game/./src/game.ts"],"sourcesContent":["export default class AdventureGame extends Phaser.Scene {\n\n    private player: Phaser.Physics.Arcade.Sprite | null = null;\n    private playerSpeed = 3;\n    private enemy;\n    private treasure;\n    private paused: boolean = false;\n    private gameover: boolean = false;\n    private cursors;\n\n    private score: { value: number, text?: Phaser.GameObjects.Text } = {\n        value: 0\n    };\n\n    constructor() {\n        super(\"Game\");\n    }\n\n    // load assets\n    preload() {\n        // load images\n        this.load.image('background', 'https://jsbin-user-assets.s3.amazonaws.com/fariazz/original-background.png');\n        // this.load.image('player', 'https://jsbin-user-assets.s3.amazonaws.com/fariazz/player.png');\n        this.load.image('enemy', 'https://jsbin-user-assets.s3.amazonaws.com/fariazz/dragon.png');\n        this.load.image('treasure', 'https://jsbin-user-assets.s3.amazonaws.com/fariazz/treasure.png');\n        //  37x45 is the size of each frame\n        //  There are 18 frames in the PNG - you can leave this value blank if the frames fill up the entire PNG, but in this case there are some\n        //  blank frames at the end, so we tell the loader how many to load\n        this.load.spritesheet('player', '../assets/spritesheets/metalslug_mummy37x45.png', { frameWidth: 37, frameHeight: 45, endFrame: 17 });\n    };\n\n    resetPlayer() {\n        this.player?.destroy()\n        const newPlayer = this.physics.add.sprite(70, 180, 'player');\n        this.player = newPlayer;\n        this.animateSprite(this.player)\n    }\n\n    resetEnemy() {\n        this.enemy?.destroy()\n        this.enemy = this.physics.add.sprite(250, 180, 'enemy');\n    }\n\n    resetTreasure() {\n        this.treasure?.destroy()\n        this.treasure = this.physics.add.sprite(550, 190, 'treasure');\n        this.treasure.setScale(0.5);\n    }\n\n    resetScore() {\n        this.score.value = 0\n        this.score.text?.setText('0')\n    }\n\n    resetColliders() {\n        this.physics.add.collider(this.player as Phaser.Physics.Arcade.Sprite, this.enemy, (player, enemy) => {\n            player.destroy();\n            this.gameover = true;\n        });\n\n        this.physics.add.collider(this.player as Phaser.Physics.Arcade.Sprite, this.treasure, (player, treasure) => {\n            treasure.destroy();\n            this.score.value += 1000;\n            this.score.text?.setText(String(this.score.value));\n            console.log(this.score.text?.text)\n        });\n    }\n\n    resetGame() {\n        this.resetPlayer();\n        this.resetTreasure();\n        this.resetEnemy();\n        this.resetColliders();\n    }\n\n    // called once after the preload ends\n    create() {\n        // create bg sprite\n        const bg = this.add.sprite(0, 0, 'background');\n        this.add.text(0, 0, 'Score: ', { fontFamily: 'Georgia, \"Goudy Bookletter 1911\", Times, serif' });\n        this.score.text = this.add.text(50, 0, \"0\", { fontFamily: 'Georgia, \"Goudy Bookletter 1911\", Times, serif' });\n        console.log(this.score.text.text)\n        // change the origin to the top-left corner\n        bg.setOrigin(0, 0);\n        this.resetGame()\n        this.cursors = this.input.keyboard.createCursorKeys();\n        this.input.keyboard.on('keydown', (e) => {\n            if (e.key === \"Escape\") {\n                this.paused = !this.paused;\n            }\n            console.log(e.key)\n            if (e.key === \"Enter\") {\n                this.resetGame()\n            }\n        });\n\n        this.animateSprite();\n    };\n\n\n    animateSprite(spriteToAnimate?: Phaser.GameObjects.Sprite) {\n        const sprite = spriteToAnimate ?? this.add.sprite(40, 100, 'player');\n\n        console.log(\"sprite anims: \", sprite.anims)\n\n        sprite.anims.create({\n            key: 'walk',\n            repeat: -1,\n            frames: 'player',\n            duration: 2000\n        });\n        console.log(sprite.anims.exists('walk'));\n\n        sprite.anims.play('walk');\n    }\n    // this is called up to 60 times per second\n    update() {\n        if (this.paused) {\n            return;\n        }\n        if (this.gameover) {\n            const restart = confirm(\"Game over! Do you want to restart?\");\n            if (restart) {\n                this.gameover = false;\n                this.resetGame()\n            }\n        }\n        this.moveEnemy(this.enemy, 5);\n        this.movePlayer();\n    };\n\n    moveEnemy(enemy, speed) {\n        if (enemy.movedRight) {\n            if (enemy.x > 250) {\n                enemy.x -= speed;\n            } else {\n                enemy.movedLeft = true;\n                enemy.movedRight = false;\n            }\n        } else {\n            if (enemy.x < 500) {\n                enemy.x += speed;\n            } else {\n                enemy.movedLeft = false;\n                enemy.movedRight = true;\n            }\n        }\n    }\n\n    movePlayer() {\n        if (this.player?.x && this.player?.y) {\n            if (this.cursors.left.isDown) {\n                this.player.x -= this.playerSpeed;\n            }\n            if (this.cursors.right.isDown) {\n                this.player.x += this.playerSpeed;\n            }\n            if (this.cursors.up.isDown) {\n                this.player.y -= this.playerSpeed;\n            }\n            if (this.cursors.down.isDown) {\n                this.player.y += this.playerSpeed;\n            }\n        }\n    }\n\n}\n// set the configuration of the game\nconst config = {\n    type: Phaser.AUTO, // Phaser will use WebGL if available, if not it will use Canvas\n    width: 640,\n    height: 480,\n    scene: AdventureGame,\n    physics: {\n        default: \"arcade\",\n        arcade: {\n            debug: false\n        }\n    },\n};\n\nconst game = new Phaser.Game(config);\n\nconsole.log(game)\n\n"],"names":["AdventureGame","Phaser","Scene","constructor","super","player","playerSpeed","paused","gameover","score","value","preload","this","load","image","spritesheet","frameWidth","frameHeight","endFrame","resetPlayer","destroy","newPlayer","physics","add","sprite","animateSprite","resetEnemy","enemy","resetTreasure","treasure","setScale","resetScore","text","setText","resetColliders","collider","String","console","log","resetGame","create","bg","fontFamily","setOrigin","cursors","input","keyboard","createCursorKeys","on","e","key","spriteToAnimate","anims","repeat","frames","duration","exists","play","update","confirm","moveEnemy","movePlayer","speed","movedRight","x","movedLeft","y","left","isDown","right","up","down","config","type","AUTO","width","height","scene","default","arcade","debug","game","Game"],"sourceRoot":""}